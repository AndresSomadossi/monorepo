name: ContinuousIntegration

on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  pull-requests: write
  contents: write

jobs:
  validate-issue:
    runs-on: ubuntu-latest
    outputs:
      issue_title: ${{ steps.extract.outputs.issue_title }}
    steps:
      - name: Validate Branch and PR Title for Issue Number and Extract Issue Title
        id: extract
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Using branch: '${{ github.head_ref }}'"
          # Extract the first number from the branch name.
          ISSUE_NUMBER=$(echo "${{ github.head_ref }}" | grep -oE '[0-9]+')
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "❌ No issue number found in branch name."
            exit 1
          fi
          echo "✅ Issue number found in branch: $ISSUE_NUMBER"

          # Validate that the PR title contains the same issue number.
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          if ! echo "$PR_TITLE" | grep -q "$ISSUE_NUMBER"; then
            echo "❌ PR title does not reference the issue number $ISSUE_NUMBER."
            exit 1
          fi
          echo "✅ PR title references the issue number: $ISSUE_NUMBER"

          # Get issue details via GitHub API.
          ISSUE_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER")
          ISSUE_TITLE=$(echo "$ISSUE_JSON" | jq -r '.title')
          if [ "$ISSUE_TITLE" = "null" ] || [ -z "$ISSUE_TITLE" ]; then
            echo "❌ Issue not found or issue title is empty."
            exit 1
          fi
          echo "✅ Issue title: $ISSUE_TITLE"
          echo "issue_title=$ISSUE_TITLE" >> "$GITHUB_OUTPUT"

      - name: Enable Auto Merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the pull request number from the event payload.
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "Enabling auto merge for PR #$PR_NUMBER with commit title: ${{ github.event.pull_request.title }}"
          gh pr merge --repo ${{ github.repository }} $PR_NUMBER --auto -d --squash -t "${{ github.event.pull_request.title }}"

  ci-checks:
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Fetch Source Code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Checks
        run: node --run checks

  ephemeral-mapping:
    needs: ci-checks
    runs-on: ubuntu-latest
    outputs:
      user_value: ${{ steps.mapping.outputs.user_value }}
    steps:
      - name: Fetch Source Code
        uses: actions/checkout@v4

      - name: Map PR User to Username
        id: mapping
        run: |
          export GITHUB_PR_USER=${{ github.event.pull_request.user.login }}
          USERNAME_MAPPING=$(node -e "const mappings = require('./.github/ephemeral-mappings.json'); console.log(mappings[process.env.GITHUB_PR_USER] || mappings.default);")
          echo "user_value=$USERNAME_MAPPING" >> $GITHUB_OUTPUT

  ephemeral-deploy:
    runs-on: ubuntu-latest
    needs: ephemeral-mapping
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/deploy
        with:
          target: ${{ needs.ephemeral-mapping.outputs.user_value }}
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ vars.TURBO_TEAM }}

  staging-deploy:
    runs-on: ubuntu-latest
    needs: ephemeral-deploy
    environment:
      name: staging
      url: https://staging.example.com  
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/deploy
        with:
          target: staging
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ vars.TURBO_TEAM }}
